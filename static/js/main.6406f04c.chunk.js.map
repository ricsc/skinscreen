{"version":3,"sources":["components/AlertDismissable.js","pages/About.js","components/LoadButton.js","model/classes.js","config.js","pages/Classify.js","pages/NotFound.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["AlertDismissable","this","props","show","react_default","a","createElement","Alert","variant","onClose","dismissible","title","dangerouslySetInnerHTML","__html","message","Component","Home","className","LoadButton","_ref","isLoading","text","loadingText","_ref$className","_ref$disabled","disabled","Object","objectWithoutProperties","Button","assign","concat","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","2","3","4","5","6","src_config","API_ENDPOINT","MODEL_PATH","IMAGE_WIDTH","IMAGE_HEIHT","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_KEY","Classify","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initWebcam","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","tf","webcam","refs","resizeWidth","resizeHeight","facingMode","sent","t0","noWebcam","style","display","stop","startWebcam","_callee2","_context2","start","stopWebcam","_callee3","_context3","getModelInfo","_callee5","_context5","fetch","config","method","then","_ref5","_callee4","response","_context4","json","data","modelLastUpdated","last_updated","catch","err","console","log","_x","apply","arguments","updateModel","_callee6","_context6","setState","isDownloadingModel","model","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","_callee7","croppedCanvas","image","imageData","resizedImage","logits","probabilities","preds","context","ratioX","ratioY","ratio","_context7","isClassifying","cropper","getCroppedCanvas","fromPixels","toFloat","processImage","resizeBilinear","predict","getTopKClasses","predictions","photoSettingsOpen","state","canvas","getContext","width","height","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","_callee8","imageCapture","resized","tensorData","_context8","capture","div","toPixels","_ref9","_callee9","_context9","abrupt","expandDims","sub","_x2","_ref10","_callee10","values","topK","valuesAndIndices","i","topkValues","topkIndices","_i","topClassesAndProbs","_i2","_context10","length","push","value","index","sort","b","Float32Array","Int32Array","probability","toFixed","_x3","_x4","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","window","openDB","db","transaction","objectStore","get","item","dateSaved","Date","modelArtifactsInfo","getTime","warn","_context11","t1","_this2","e","_this3","react","onClick","aria-controls","aria-expanded","index_esm","Collapse","in","id","Container","modelType","Tabs","defaultActiveKey","onSelect","Tab","eventKey","ref","autoPlay","playsInline","muted","Form","Group","controlId","Label","Control","onChange","type","accept","react_cropper_default","src","guides","aspectRatio","viewMode","ListGroup","map","category","Item","key","pages_NotFound","href","Routes","childProps","react_router","path","exact","component","About","NotFound","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","Navbar","collapseOnSelect","expand","Brand","Toggle","Nav","react_router_dom","to","updateAvailable","paddingTop","components_AlertDismissable","withRouter","isLocalhost","Boolean","location","hostname","match","register","navigator","process","origin","addEventListener","swUrl","contentType","headers","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","newerSwAvailable","sw","onUpdate","waiting","active","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","postMessage","src_App_0","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.6406f04c.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n/**\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\n * @extends React.Component\n */\nclass AlertDismissable extends Component {\n\n  render() {\n    if (this.props.show) {\n      return (\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\n        </Alert>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AlertDismissable;\n","import React, { Component } from 'react';\nimport './About.css';\n\n/**\n * Class to handle the rendering of the Home page.\n * @extends React.Component\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"About container\">\n        <h1>About</h1>\n        <p>\n          This is a TensorFlow.js web application where users can classify images selected locally\n          or taken with their device's camera. The app uses TensorFlow.js and a pre-trained model\n          converted to the TensorFlow.js format to provide the inference capabilities.\n          This model is saved locally in the browser using IndexedDB. A service worker is also used\n          to provide offline capabilities.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\n/**\n * This produces a button that will have a loading animation while the isLoading property is true.\n */\nexport default ({\n  isLoading,\n  text,\n  loadingText,\n  className = '',\n  disabled = false,\n  ...props\n}) =>\n  <Button\n    className={`LoadButton ${className}`}\n    disabled={disabled || isLoading}\n    {...props}\n  >\n    {isLoading && <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />}{' '}\n    {isLoading ? loadingText : text}\n  </Button>;\n","/* eslint-disable */\n// Theses classes should correspond to the softmax output of your model.\n\nexport const MODEL_CLASSES = {\n  0: 'Actinic Keratoses - Danger',\n  1: 'Basal Cell Carcinoma - Danger',\n  2: 'Benign Keratosis like Lesion - Harmless',\n  3: 'Dermatofibroma - Harmless',\n  4: 'Melanocytic Nevi - Caution',\n  5: 'Vascular Lesion - Harmless',\n  6: 'Melanoma - Danger'\n};\n","export default {\n  //API_ENDPOINT: 'http://localhost:5000/api',\n  API_ENDPOINT: 'https://ricsc.github.io/api'\n};\n","import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config';\nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\n\n\nconst MODEL_PATH = '/model/model.json';\n\n\nconst IMAGE_WIDTH = 256;\nconst IMAGE_HEIHT = 192;\nconst CANVAS_SIZE = 256;\n\nconst TOPK_PREDICTIONS = 5;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\nexport default class Classify extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    // Warm up model.\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([null, IMAGE_HEIHT, IMAGE_WIDTH, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    // Attempt to dispose of the model.\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n      // Assume model is not loaded or already disposed.\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n  }\n\n  updateModel = async () => {\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n  classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    // Process and resize image before passing in to model.\n    const imageData = await this.processImage(image);\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_HEIHT, IMAGE_WIDTH]);\n\n    const logits = this.model.predict(resizedImage);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    // Dispose of tensors we are finished with.\n    image.dispose();\n    imageData.dispose();\n    resizedImage.dispose();\n    logits.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_HEIHT, IMAGE_WIDTH]);\n    const imageData = await this.processImage(resized);\n    const logits = this.model.predict(imageData);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    // Dispose of tensors we are finished with.\n    resized.dispose();\n    imageCapture.dispose();\n    imageData.dispose();\n    logits.dispose();\n    tensorData.dispose();\n  }\n\n  processImage = async (image) => {\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n  /**\n   * Computes the probabilities of the topK classes given logits by computing\n   * softmax to get probabilities and then sorting the probabilities.\n   * @param logits Tensor representing the logits from MobileNet.\n   * @param topK The number of top predictions to show.\n   */\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    for (let i = 0; i < topkIndices.length; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\">\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n        <Button\n          onClick={this.handlePanelClick}\n          className=\"classify-panel-header\"\n          aria-controls=\"photo-selection-pane\"\n          aria-expanded={this.state.photoSettingsOpen}\n          >\n          Take or Select a Photo to Classify\n            <span className='panel-arrow'>\n            { this.state.photoSettingsOpen\n              ? <FaChevronDown />\n              : <FaChevronRight />\n            }\n            </span>\n          </Button>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.\n                </div>\n                <div className=\"webcam-box-outer\">\n                  <div className=\"webcam-box-inner\">\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\n                           width=\"448\" height=\"448\">\n                    </video>\n                  </div>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Classify\"\n                    loadingText=\"Classifying...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label>Select Image File</Form.Label><br />\n                  <Form.Label className=\"imagelabel\">\n                    {this.state.filename ? this.state.filename : 'Browse...'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: 400, width: '100%'}}\n                        guides={true}\n                        aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton\n                        variant=\"primary\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Classify\"\n                        loadingText=\"Classifying...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3>Predictions</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                  return (\n                    <ListGroup.Item key={category.className}>\n                      <strong>{category.className}</strong> {category.probability}%</ListGroup.Item>\n                  );\n              })}\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './NotFound.css';\n\n/**\n * This is rendered when a route is not found (404).\n */\nexport default () =>\n  <div className=\"NotFound\">\n    <h1>404</h1>\n    <h3>The page you were looking for is not here.</h3>\n    <a href=\"/\">Go Home</a>\n  </div>;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\nimport Classify from './pages/Classify';\nimport NotFound from './pages/NotFound';\n\nexport default ({ childProps }) =>\n  <Switch>\n    <Route path=\"/\" exact component={Classify} props={childProps} />\n    <Route path=\"/about\" exact component={About} props={childProps} />\n    <Route component={NotFound} />\n  </Switch>;\n","import { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport AlertDismissable from './components/AlertDismissable';\nimport Routes from './Routes';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const reloadMsg = `\n      New content is available.<br />\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\n      and then reopen the application.</small>\n    `;\n    this.state = {\n      showUpdateAlert: true,\n      reloadMsg: reloadMsg\n    };\n  }\n\n  dismissUpdateAlert = event => {\n    this.setState({ showUpdateAlert: false });\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Container>\n            <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\n              <Navbar.Brand href=\"/\">Skinscreen</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"\">\n                  <Link className=\"nav-link\" to=\"/\">Classify</Link>\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n            { this.props.updateAvailable && this.state.showUpdateAlert &&\n              <div style={{paddingTop: '10px'}}>\n                <AlertDismissable\n                  title=\"\"\n                  variant=\"info\"\n                  message={this.state.reloadMsg}\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\n                  onClose={this.dismissUpdateAlert} />\n              </div>\n            }\n          </Container>\n          <Container>\n            <Routes />\n          </Container>\n        </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // A new service worker has previously finished installing, and is now waiting.\n      if (registration.waiting && registration.active) {\n        newerSwAvailable(registration.waiting);\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              newerSwAvailable(installingWorker);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n      function newerSwAvailable(sw){\n        // At this point, the updated precached content has been fetched,\n        // but the previous service worker will still serve the older\n        // content until all client tabs are closed.\n        console.log(\n          'New content is available and will be used when all ' +\n            'tabs for this page are closed. See http://bit.ly/CRA2-PWA.'\n        );\n        if (config && config.onUpdate) {\n          config.onUpdate(registration, sw);\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Index extends Component {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onUpdate: this.handleUpdate,\n    };\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register(config);\n  }\n\n  render() {\n    return (\n      <Router>\n        <App updateAvailable={this.state.updateAvailable} />\n      </Router>\n    );\n  }\n\n  handleUpdate = (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n    this.setState({ updateAvailable: true});\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n"],"sourceRoot":""}